// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATERIAL_CLOCKWORK___INTERNAL_ASSET_TYPES_H_
#define FLATBUFFERS_GENERATED_MATERIAL_CLOCKWORK___INTERNAL_ASSET_TYPES_H_

#include "flatbuffers/flatbuffers.h"

namespace clockwork {
namespace schemas {
namespace asset {
namespace types {

struct Color;

struct Material;
struct MaterialBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Color FLATBUFFERS_FINAL_CLASS {
 private:
  float r_;
  float g_;
  float b_;
  float a_;

 public:
  Color()
      : r_(0),
        g_(0),
        b_(0),
        a_(0) {
  }
  Color(float _r, float _g, float _b, float _a)
      : r_(flatbuffers::EndianScalar(_r)),
        g_(flatbuffers::EndianScalar(_g)),
        b_(flatbuffers::EndianScalar(_b)),
        a_(flatbuffers::EndianScalar(_a)) {
  }
  float r() const {
    return flatbuffers::EndianScalar(r_);
  }
  float g() const {
    return flatbuffers::EndianScalar(g_);
  }
  float b() const {
    return flatbuffers::EndianScalar(b_);
  }
  float a() const {
    return flatbuffers::EndianScalar(a_);
  }
};
FLATBUFFERS_STRUCT_END(Color, 16);

struct Material FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MaterialBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT__ID = 4,
    VT_ALBEDOBASE = 6,
    VT_ALBEDORESOURCE = 8,
    VT_AORESOURCE = 10,
    VT_DIFFUSEBASE = 12,
    VT_DIFFUSERESOURCE = 14,
    VT_DISPLACEMENTRESOURCE = 16,
    VT_METALNESSRESOURCE = 18,
    VT_NORMALRESOURCE = 20,
    VT_ROUGHNESSRESOURCE = 22,
    VT_SPECULARBASE = 24,
    VT_SPECULARRESOURCE = 26
  };
  const flatbuffers::String *_id() const {
    return GetPointer<const flatbuffers::String *>(VT__ID);
  }
  const clockwork::schemas::asset::types::Color *albedoBase() const {
    return GetStruct<const clockwork::schemas::asset::types::Color *>(VT_ALBEDOBASE);
  }
  const flatbuffers::String *albedoResource() const {
    return GetPointer<const flatbuffers::String *>(VT_ALBEDORESOURCE);
  }
  const flatbuffers::String *aoResource() const {
    return GetPointer<const flatbuffers::String *>(VT_AORESOURCE);
  }
  const clockwork::schemas::asset::types::Color *diffuseBase() const {
    return GetStruct<const clockwork::schemas::asset::types::Color *>(VT_DIFFUSEBASE);
  }
  const flatbuffers::String *diffuseResource() const {
    return GetPointer<const flatbuffers::String *>(VT_DIFFUSERESOURCE);
  }
  const flatbuffers::String *displacementResource() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLACEMENTRESOURCE);
  }
  const flatbuffers::String *metalnessResource() const {
    return GetPointer<const flatbuffers::String *>(VT_METALNESSRESOURCE);
  }
  const flatbuffers::String *normalResource() const {
    return GetPointer<const flatbuffers::String *>(VT_NORMALRESOURCE);
  }
  const flatbuffers::String *roughnessResource() const {
    return GetPointer<const flatbuffers::String *>(VT_ROUGHNESSRESOURCE);
  }
  const clockwork::schemas::asset::types::Color *specularBase() const {
    return GetStruct<const clockwork::schemas::asset::types::Color *>(VT_SPECULARBASE);
  }
  const flatbuffers::String *specularResource() const {
    return GetPointer<const flatbuffers::String *>(VT_SPECULARRESOURCE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT__ID) &&
           verifier.VerifyString(_id()) &&
           VerifyField<clockwork::schemas::asset::types::Color>(verifier, VT_ALBEDOBASE) &&
           VerifyOffset(verifier, VT_ALBEDORESOURCE) &&
           verifier.VerifyString(albedoResource()) &&
           VerifyOffset(verifier, VT_AORESOURCE) &&
           verifier.VerifyString(aoResource()) &&
           VerifyField<clockwork::schemas::asset::types::Color>(verifier, VT_DIFFUSEBASE) &&
           VerifyOffset(verifier, VT_DIFFUSERESOURCE) &&
           verifier.VerifyString(diffuseResource()) &&
           VerifyOffset(verifier, VT_DISPLACEMENTRESOURCE) &&
           verifier.VerifyString(displacementResource()) &&
           VerifyOffset(verifier, VT_METALNESSRESOURCE) &&
           verifier.VerifyString(metalnessResource()) &&
           VerifyOffset(verifier, VT_NORMALRESOURCE) &&
           verifier.VerifyString(normalResource()) &&
           VerifyOffset(verifier, VT_ROUGHNESSRESOURCE) &&
           verifier.VerifyString(roughnessResource()) &&
           VerifyField<clockwork::schemas::asset::types::Color>(verifier, VT_SPECULARBASE) &&
           VerifyOffset(verifier, VT_SPECULARRESOURCE) &&
           verifier.VerifyString(specularResource()) &&
           verifier.EndTable();
  }
};

struct MaterialBuilder {
  typedef Material Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__id(flatbuffers::Offset<flatbuffers::String> _id) {
    fbb_.AddOffset(Material::VT__ID, _id);
  }
  void add_albedoBase(const clockwork::schemas::asset::types::Color *albedoBase) {
    fbb_.AddStruct(Material::VT_ALBEDOBASE, albedoBase);
  }
  void add_albedoResource(flatbuffers::Offset<flatbuffers::String> albedoResource) {
    fbb_.AddOffset(Material::VT_ALBEDORESOURCE, albedoResource);
  }
  void add_aoResource(flatbuffers::Offset<flatbuffers::String> aoResource) {
    fbb_.AddOffset(Material::VT_AORESOURCE, aoResource);
  }
  void add_diffuseBase(const clockwork::schemas::asset::types::Color *diffuseBase) {
    fbb_.AddStruct(Material::VT_DIFFUSEBASE, diffuseBase);
  }
  void add_diffuseResource(flatbuffers::Offset<flatbuffers::String> diffuseResource) {
    fbb_.AddOffset(Material::VT_DIFFUSERESOURCE, diffuseResource);
  }
  void add_displacementResource(flatbuffers::Offset<flatbuffers::String> displacementResource) {
    fbb_.AddOffset(Material::VT_DISPLACEMENTRESOURCE, displacementResource);
  }
  void add_metalnessResource(flatbuffers::Offset<flatbuffers::String> metalnessResource) {
    fbb_.AddOffset(Material::VT_METALNESSRESOURCE, metalnessResource);
  }
  void add_normalResource(flatbuffers::Offset<flatbuffers::String> normalResource) {
    fbb_.AddOffset(Material::VT_NORMALRESOURCE, normalResource);
  }
  void add_roughnessResource(flatbuffers::Offset<flatbuffers::String> roughnessResource) {
    fbb_.AddOffset(Material::VT_ROUGHNESSRESOURCE, roughnessResource);
  }
  void add_specularBase(const clockwork::schemas::asset::types::Color *specularBase) {
    fbb_.AddStruct(Material::VT_SPECULARBASE, specularBase);
  }
  void add_specularResource(flatbuffers::Offset<flatbuffers::String> specularResource) {
    fbb_.AddOffset(Material::VT_SPECULARRESOURCE, specularResource);
  }
  explicit MaterialBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Material> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Material>(end);
    return o;
  }
};

inline flatbuffers::Offset<Material> CreateMaterial(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> _id = 0,
    const clockwork::schemas::asset::types::Color *albedoBase = 0,
    flatbuffers::Offset<flatbuffers::String> albedoResource = 0,
    flatbuffers::Offset<flatbuffers::String> aoResource = 0,
    const clockwork::schemas::asset::types::Color *diffuseBase = 0,
    flatbuffers::Offset<flatbuffers::String> diffuseResource = 0,
    flatbuffers::Offset<flatbuffers::String> displacementResource = 0,
    flatbuffers::Offset<flatbuffers::String> metalnessResource = 0,
    flatbuffers::Offset<flatbuffers::String> normalResource = 0,
    flatbuffers::Offset<flatbuffers::String> roughnessResource = 0,
    const clockwork::schemas::asset::types::Color *specularBase = 0,
    flatbuffers::Offset<flatbuffers::String> specularResource = 0) {
  MaterialBuilder builder_(_fbb);
  builder_.add_specularResource(specularResource);
  builder_.add_specularBase(specularBase);
  builder_.add_roughnessResource(roughnessResource);
  builder_.add_normalResource(normalResource);
  builder_.add_metalnessResource(metalnessResource);
  builder_.add_displacementResource(displacementResource);
  builder_.add_diffuseResource(diffuseResource);
  builder_.add_diffuseBase(diffuseBase);
  builder_.add_aoResource(aoResource);
  builder_.add_albedoResource(albedoResource);
  builder_.add_albedoBase(albedoBase);
  builder_.add__id(_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Material> CreateMaterialDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *_id = nullptr,
    const clockwork::schemas::asset::types::Color *albedoBase = 0,
    const char *albedoResource = nullptr,
    const char *aoResource = nullptr,
    const clockwork::schemas::asset::types::Color *diffuseBase = 0,
    const char *diffuseResource = nullptr,
    const char *displacementResource = nullptr,
    const char *metalnessResource = nullptr,
    const char *normalResource = nullptr,
    const char *roughnessResource = nullptr,
    const clockwork::schemas::asset::types::Color *specularBase = 0,
    const char *specularResource = nullptr) {
  auto _id__ = _id ? _fbb.CreateString(_id) : 0;
  auto albedoResource__ = albedoResource ? _fbb.CreateString(albedoResource) : 0;
  auto aoResource__ = aoResource ? _fbb.CreateString(aoResource) : 0;
  auto diffuseResource__ = diffuseResource ? _fbb.CreateString(diffuseResource) : 0;
  auto displacementResource__ = displacementResource ? _fbb.CreateString(displacementResource) : 0;
  auto metalnessResource__ = metalnessResource ? _fbb.CreateString(metalnessResource) : 0;
  auto normalResource__ = normalResource ? _fbb.CreateString(normalResource) : 0;
  auto roughnessResource__ = roughnessResource ? _fbb.CreateString(roughnessResource) : 0;
  auto specularResource__ = specularResource ? _fbb.CreateString(specularResource) : 0;
  return clockwork::schemas::asset::types::CreateMaterial(
      _fbb,
      _id__,
      albedoBase,
      albedoResource__,
      aoResource__,
      diffuseBase,
      diffuseResource__,
      displacementResource__,
      metalnessResource__,
      normalResource__,
      roughnessResource__,
      specularBase,
      specularResource__);
}

inline const clockwork::schemas::asset::types::Material *GetMaterial(const void *buf) {
  return flatbuffers::GetRoot<clockwork::schemas::asset::types::Material>(buf);
}

inline const clockwork::schemas::asset::types::Material *GetSizePrefixedMaterial(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<clockwork::schemas::asset::types::Material>(buf);
}

inline bool VerifyMaterialBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<clockwork::schemas::asset::types::Material>(nullptr);
}

inline bool VerifySizePrefixedMaterialBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<clockwork::schemas::asset::types::Material>(nullptr);
}

inline void FinishMaterialBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<clockwork::schemas::asset::types::Material> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMaterialBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<clockwork::schemas::asset::types::Material> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace types
}  // namespace asset
}  // namespace schemas
}  // namespace clockwork

#endif  // FLATBUFFERS_GENERATED_MATERIAL_CLOCKWORK___INTERNAL_ASSET_TYPES_H_
