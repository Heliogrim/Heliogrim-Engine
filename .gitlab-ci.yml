workflow:
  rules:
    # Only protected branches
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
    - if: '$CI_COMMIT_TAG != null'
    # Merge Requests
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED

variables:
  GIT_DEPTH: 0
  VULKAN_VERSION: 1.3.275.0
  C_CLANG_TARGET: clang-18
  CXX_CLANG_TARGET: clang++-18
  C_GCC_TARGET: gcc-13
  CXX_GCC_TARGET: g++-13

stages:
  - build
  - test
  - release

build.windows.msvc:
  stage: build
  tags:
    - windows
    - vulkan
    - amd64

  cache:
    - key: cmake-cache-build-windows-msvc
      paths:
        - build/Debug
        - build/Profile
        - build/Release
    - key: cmake-cache-deps-windows-msvc
      paths:
        - library/*/bin/
        - library/*/compile/
        - library/*/include/
        - library/*/.signature

  # Preparation
  before_script:
    - Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force
    - $vsinstalldir = $(If(Test-Path -Path 'C:\Program Files\Microsoft Visual Studio\2022\') { 'C:\Program Files\Microsoft Visual Studio\2022\' } Else { 'C:\Program Files (x86)\Microsoft Visual Studio\2022\' })
    - echo "Mounting"; & (Get-ChildItem -Path $vsinstalldir -Filter 'Launch-VsDevShell.ps1' -Recurse -ErrorAction SilentlyContinue).FullName -Arch amd64

    - cmake --version
    - $logical_core_count = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors

  # Process
  script:
    # Building

    # CMake - Debug
    - cmake -S . -B build/Debug -G Ninja -DCMAKE_BUILD_TYPE=Debug
    - cmake --build build/Debug -t Heliogrim-Heliogrim --parallel $logical_core_count
    - cmake --build build/Debug -t Heliogrim-Editor --parallel $logical_core_count
    - cmake --build build/Debug -t Heliogrim-AllTests --parallel $logical_core_count

    # CMake - Profile
    #- cmake -S . -B build/Profile -A x64 -D CMAKE_BUILD_TYPE=Profile --fresh
    #- cmake --build build/Profile -t Heliogrim-Heliogrim --parallel $logical_core_count --clean-first
    #- cmake --build build/Profile -t Heliogrim-Editor --parallel $logical_core_count

    # CMake - Release
    #- cmake -S . -B build/Release -A x64 -D CMAKE_BUILD_TYPE=Release --fresh
    #- cmake --build build/Release -t Heliogrim-Heliogrim --parallel $logical_core_count --clean-first
    #- cmake --build build/Release -t Heliogrim-Editor --parallel $logical_core_count

  # Cleanup / Referencing
  after_script:
    #- CI_JOB_NAME=$CI_JOB_NAME
    #- echo "JOB_${CI_JOB_NAME//./_}_ID=$CI_JOB_ID" >> build.report.env
    - echo "JOB_build_windows_msvc_ID=$CI_JOB_ID" >> build.report.env

  artifacts:
    name: Heliogrim-Win-MSVC-$CI_COMMIT_REF_NAME
    paths:
      - build/Debug/
      #- build/Release/
      #- build/Profile/
      - dist/Debug/
      #- dist/Release/
      #- dist/Profile/
    expire_in: 15min
    reports:
      dotenv: build.report.env

build.windows.clang:
  stage: build
  tags:
    - windows
    - vulkan
    - amd64

  cache:
    - key: cmake-cache-build-windows-clang
      paths:
        - build/Debug
        - build/Profile
        - build/Release
    - key: cmake-cache-deps-windows-clang
      paths:
        - library/*/bin/
        - library/*/compile/
        - library/*/include/
        - library/*/.signature

  # Preparation
  before_script:
    - Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force
    - $vsinstalldir = $(If(Test-Path -Path 'C:\Program Files\Microsoft Visual Studio\2022\') { 'C:\Program Files\Microsoft Visual Studio\2022\' } Else { 'C:\Program Files (x86)\Microsoft Visual Studio\2022\' })
    - echo "Mounting"; & (Get-ChildItem -Path $vsinstalldir -Filter 'Launch-VsDevShell.ps1' -Recurse -ErrorAction SilentlyContinue).FullName -Arch amd64
    - $vsclangcl = (Get-ChildItem -Path $vsinstalldir -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.FullName -Match 'Llvm\\x64\\bin\\clang-cl.exe$'}).FullName

    - cmake --version
    - $logical_core_count = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors

  # Process
  script:
    # Building

    # CMake - Debug
    - cmake -S . -B build/Debug -G Ninja "$("-DCMAKE_C_COMPILER=" + $vsclangcl)" "$("-DCMAKE_CXX_COMPILER=" + $vsclangcl)" -DCMAKE_BUILD_TYPE=Debug
    - cmake --build build/Debug -t Heliogrim-Heliogrim --parallel $logical_core_count
    - cmake --build build/Debug -t Heliogrim-Editor --parallel $logical_core_count
    - cmake --build build/Debug -t Heliogrim-AllTests --parallel $logical_core_count

    # CMake - Profile
    #- cmake -S . -B build/Profile -T ClangCL -A x64 -D CMAKE_BUILD_TYPE=Profile --fresh
    #- cmake --build build/Profile -t Heliogrim-Heliogrim --parallel $logical_core_count --clean-first
    #- cmake --build build/Profile -t Heliogrim-Editor --parallel $logical_core_count

    # CMake - Release
    #- cmake -S . -B build/Release -T ClangCL -A x64 -D CMAKE_BUILD_TYPE=Release --fresh
    #- cmake --build build/Release -t Heliogrim-Heliogrim --parallel $logical_core_count --clean-first
    #- cmake --build build/Release -t Heliogrim-Editor --parallel $logical_core_count

  # Cleanup / Referencing
  after_script:
    #- CI_JOB_NAME=$CI_JOB_NAME
    #- echo "JOB_${CI_JOB_NAME//./_}_ID=$CI_JOB_ID" >> build.report.env
    - echo "JOB_build_windows_clang_ID=$CI_JOB_ID" >> build.report.env

  artifacts:
    name: Heliogrim-Win-Clang-$CI_COMMIT_REF_NAME
    paths:
      - build/Debug/
      #- build/Release/
      #- build/Profile/
      - dist/Debug/
      #- dist/Release/
      #- dist/Profile/
    expire_in: 15min
    reports:
      dotenv: build.report.env

build.linux.gcc:
  stage: build
  tags:
    - linux
    - amd64

  # Preparation
  before_script:
    # Prepare Commands
    - command -v make 2>&1 || { echo >&2 "Required unavailable command make, try to recover."; sudo apt-get install build-essential -y; }
    - command -v cmake 2>&1 || { echo >&2 "Required unavailable command cmake, try to recover."; sudo apt-get install cmake -y; }
    - command -v g++ 2>&1 || { echo >&2 "Required unavailable command g++, try to recover."; sudo apt-get install build-essential -y; }
    - command -v xz 2>&1 || { echo >&2 "Required unavailable command xz, try to recover."; sudo apt-get install xz-utils -y; }
    # Optional Commands
    - command -v ninja 2>&1 || { echo >&2 "Optional unavailable command ninja, try to recover."; sudo apt-get install ninja-build -y; }
    # Check Versions
    - cmake --version
    # Install System Dependencies
    - sudo apt-get -qq install pkg-config cmake-data mesa-vulkan-drivers -y
    - sudo apt-get -qq install xcb libx11-xcb1 libxcb1-dev libxcb-xfixes0 libxcb-xfixes0-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxcursor1 libxcursor-dev libxrandr2 libxrandr-dev libxrender1 libxrender-dev libxss1 libxss-dev libxi6 x11proto-dev xorg-sgml-doctools libxi-dev -y
    - sudo apt-get -qq install libwayland-dev libwayland-client0 libwayland-cursor0 libegl1-mesa-dev libegl-mesa0 libwayland-egl-backend-dev libwayland-egl1 libxkbcommon-dev libxkbcommon0 libdecor-0-dev libdecor-0-0 -y
    - sudo apt-get -qq install libuuid1 uuid-dev -y

  # Process
  script:
    # Building

    # Generator: Makefiles ~ '-A x64' by default

    # CMake - Debug
    - cmake -S . -B build/Debug -D CMAKE_C_COMPILER=`which gcc` -D CMAKE_CXX_COMPILER=`which g++` -D CMAKE_BUILD_TYPE=Debug
    - cmake --build build/Debug -t Heliogrim-Heliogrim --parallel $(nproc)
    - cmake --build build/Debug -t Heliogrim-Editor --parallel $(nproc)
    - cmake --build build/Debug -t Heliogrim-AllTests --parallel $(nproc)

    # CMake - Profile
    #- cmake -S . -B build/Profile -A x64 -D CMAKE_C_COMPILER=`which gcc` -D CMAKE_CXX_COMPILER=`which g++` -D CMAKE_BUILD_TYPE=Profile --fresh
    #- cmake --build build/Profile --parallel $(nproc) -t Game --clean-first

    # CMake - Release
    #- cmake -S . -B build/Release -A x64 -D CMAKE_C_COMPILER=`which gcc` -D CMAKE_CXX_COMPILER=`which g++` -D CMAKE_BUILD_TYPE=Release --fresh
    #- cmake --build build/Release --parallel $(nproc) -t Game --clean-first

  # Cleanup / Referencing
  after_script:
    #- CI_JOB_NAME=$CI_JOB_NAME
    - echo "JOB_build_linux_gcc_ID=$CI_JOB_ID" >> build.report.env

  artifacts:
    name: Heliogrim-Unix-GCC-$CI_COMMIT_REF_NAME
    paths:
      - build/Debug/
      #- build/Profile/
      #- build/Release/
      - dist/Debug/
      #- dist/Release/
      #- dist/Profile/
    expire_in: 15min
    reports:
      dotenv: build.report.env

build.linux.clang:
  stage: build
  tags:
    - linux
    - amd64

  # Preparation
  before_script:
    # Prepare Commands
    - command -v make 2>&1 || { echo >&2 "Required unavailable command make, try to recover."; sudo apt-get install build-essential -y; }
    - command -v cmake 2>&1 || { echo >&2 "Required unavailable command cmake, try to recover."; sudo apt-get install cmake -y; }
    - |-
      command -v $C_CLANG_TARGET 2>&1 || {
          echo >&2 "Required unavailable command clang, try to recover."
          sudo apt-get install lsb-release wget software-properties-common gnupg -y
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
      }
    - command -v xz 2>&1 || { echo >&2 "Required unavailable command xz, try to recover."; sudo apt-get install xz-utils -y; }
    # Optional Commands
    - command -v ninja 2>&1 || { echo >&2 "Optional unavailable command ninja, try to recover."; sudo apt-get install ninja-build -y; }
    # Check Versions
    - cmake --version
    # Install System Dependencies
    - sudo apt-get -qq install pkg-config cmake-data mesa-vulkan-drivers -y
    - sudo apt-get -qq install xcb libx11-xcb1 libxcb1-dev libxcb-xfixes0 libxcb-xfixes0-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxcursor1 libxcursor-dev libxrandr2 libxrandr-dev libxrender1 libxrender-dev libxss1 libxss-dev libxi6 x11proto-dev xorg-sgml-doctools libxi-dev -y
    - sudo apt-get -qq install libwayland-dev libwayland-client0 libwayland-cursor0 libegl1-mesa-dev libegl-mesa0 libwayland-egl-backend-dev libwayland-egl1 libxkbcommon-dev libxkbcommon0 libdecor-0-dev libdecor-0-0 -y
    - sudo apt-get -qq install libuuid1 uuid-dev -y

  # Process
  script:
    # Building

    # Generator: Makefiles ~ '-A x64' by default

    # CMake - Debug
    - cmake -S . -B build/Debug -D CMAKE_C_COMPILER=`which $C_CLANG_TARGET` -D CMAKE_CXX_COMPILER=`which $CXX_CLANG_TARGET` -D CMAKE_BUILD_TYPE=Debug
    - cmake --build build/Debug -t Heliogrim-Heliogrim --parallel $(nproc)
    - cmake --build build/Debug -t Heliogrim-Editor --parallel $(nproc)
    - cmake --build build/Debug -t Heliogrim-AllTests --parallel $(nproc)

    # CMake - Profile
    #- cmake -S . -B build/Profile -A x64 -D CMAKE_C_COMPILER=`which $C_CLANG_TARGET` -D CMAKE_CXX_COMPILER=`which $CXX_CLANG_TARGET` -D CMAKE_BUILD_TYPE=Profile --fresh
    #- cmake --build build/Profile --parallel $(nproc) -t Game --clean-first

    # CMake - Release
    #- cmake -S . -B build/Release -A x64 -D CMAKE_C_COMPILER=`which $C_CLANG_TARGET` -D CMAKE_CXX_COMPILER=`which $CXX_CLANG_TARGET` -D CMAKE_BUILD_TYPE=Release --fresh
    #- cmake --build build/Release --parallel $(nproc) -t Game --clean-first

  # Cleanup / Referencing
  after_script:
    - CI_JOB_NAME=$CI_JOB_NAME
    - echo "JOB_build_linux_clang_ID=$CI_JOB_ID" >> build.report.env

  artifacts:
    name: Heliogrim-Unix-Clang-$CI_COMMIT_REF_NAME
    paths:
      - build/Debug/
      #- build/Profile/
      #- build/Release/
      - dist/Debug/
      #- dist/Release/
      #- dist/Profile/
    expire_in: 15min
    reports:
      dotenv: build.report.env

# Testing Section

test.windows.msvc:
  stage: test
  tags:
    - windows
    - vulkan
    - amd64
  needs:
    - job: build.windows.msvc
      artifacts: true

  # Preparation
  before_script:
    - cmake --version
    - $logical_core_count = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors

  # Process
  script:
    # Testing

    # CMake - Debug
    - ctest --test-dir build/Debug --output-junit "$PWD/ctest-report.xml" --parallel $logical_core_count

  artifacts:
    when: always
    paths:
      - ctest-report.xml
    reports:
      junit: ctest-report.xml

test.windows.clang:
  stage: test
  tags:
    - windows
    - vulkan
    - amd64
  needs:
    - job: build.windows.clang
      artifacts: true

  # Preparation
  before_script:
    - cmake --version
    - $logical_core_count = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors

  # Process
  script:
    # Testing

    # CMake - Debug
    - ctest --test-dir build/Debug --output-junit "$PWD/ctest-report.xml" --parallel $logical_core_count

  artifacts:
    when: always
    paths:
      - ctest-report.xml
    reports:
      junit: ctest-report.xml

test.linux.gcc:
  stage: test
  tags:
    - linux
    - amd64
  needs:
    - job: build.linux.gcc
      artifacts: true

  # Preparation
  before_script:
    - cmake --version
    - $logical_core_count = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
    # Install System Dependencies
    - sudo apt-get -qq install pkg-config cmake-data mesa-vulkan-drivers -y
    - sudo apt-get -qq install xcb libx11-xcb1 libxcb1-dev libxcb-xfixes0 libxcb-xfixes0-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxcursor1 libxcursor-dev libxrandr2 libxrandr-dev libxrender1 libxrender-dev libxss1 libxss-dev libxi6 x11proto-dev xorg-sgml-doctools libxi-dev -y
    - sudo apt-get -qq install libwayland-dev libwayland-client0 libwayland-cursor0 libegl1-mesa-dev libegl-mesa0 libwayland-egl-backend-dev libwayland-egl1 libxkbcommon-dev libxkbcommon0 libdecor-0-dev libdecor-0-0 -y
    - sudo apt-get -qq install libuuid1 uuid-dev -y

  # Process
  script:
    # Testing

    # CMake - Debug
    - ctest --test-dir build/Debug --output-junit "$PWD/ctest-report.xml" --parallel $logical_core_count

  artifacts:
    when: always
    paths:
      - ctest-report.xml
    reports:
      junit: ctest-report.xml

test.linux.clang:
  stage: test
  tags:
    - linux
    - amd64
  needs:
    - job: build.linux.clang
      artifacts: true

  # Preparation
  before_script:
    - cmake --version
    - $logical_core_count = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
    # Install System Dependencies
    - sudo apt-get -qq install pkg-config cmake-data mesa-vulkan-drivers -y
    - sudo apt-get -qq install xcb libx11-xcb1 libxcb1-dev libxcb-xfixes0 libxcb-xfixes0-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxcursor1 libxcursor-dev libxrandr2 libxrandr-dev libxrender1 libxrender-dev libxss1 libxss-dev libxi6 x11proto-dev xorg-sgml-doctools libxi-dev -y
    - sudo apt-get -qq install libwayland-dev libwayland-client0 libwayland-cursor0 libegl1-mesa-dev libegl-mesa0 libwayland-egl-backend-dev libwayland-egl1 libxkbcommon-dev libxkbcommon0 libdecor-0-dev libdecor-0-0 -y
    - sudo apt-get -qq install libuuid1 uuid-dev -y

  # Process
  script:
    # Testing

    # CMake - Debug
    - ctest --test-dir build/Debug --output-junit "$PWD/ctest-report.xml" --parallel $logical_core_count

  artifacts:
    when: always
    paths:
      - ctest-report.xml
    reports:
      junit: ctest-report.xml

# Release / Deployment Section

release:
  stage: release
  tags:
    - linux
    - amd64
  rules:
    - if: '$CI_COMMIT_TAG != null'
  needs:
    - job: build.linux.gcc
      artifacts: true
    - job: build.linux.clang
      artifacts: true
    - job: build.windows.msvc
      artifacts: true
    - job: build.windows.clang
      artifacts: true
  before_script:
    # Prepare Commands
    - |-
      command -v release-cli 2>&1 || {
          echo >&2 "Required unavailable command release-cli, try to recover."
          wget https://go.dev/dl/go1.20.5.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.20.5.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin
          source ~/.bashrc
          sudo curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
          sudo chmod +x /usr/local/bin/release-cli
          source ~/.bashrc
      }
  script:
    - echo "Release '$CI_COMMIT_TAG' using jobs '$JOB_build_linux_gcc_ID', '$JOB_build_linux_clang_ID', '$JOB_build_windows_msvc_ID', '$JOB_build_windows_clang_ID'"
  release:
    tag_name: '$CI_COMMIT_TAG'
    name: "Release '$CI_COMMIT_TAG'"
    description: 'CI automatic tagged release.'
    assets:
      links:
        - name: "Linux GCC Build"
          url: 'https://git.neogc.net/heliogrim-workgroup/engine/-/jobs/$JOB_build_linux_gcc_ID/artifacts/download'
        - name: "Linux Clang Build"
          url: 'https://git.neogc.net/heliogrim-workgroup/engine/-/jobs/$JOB_build_linux_clang_ID/artifacts/download'
        - name: "Windows MSVC Build"
          url: 'https://git.neogc.net/heliogrim-workgroup/engine/-/jobs/$JOB_build_windows_msvc_ID/artifacts/download'
        - name: "Windows Clang Build"
          url: 'https://git.neogc.net/heliogrim-workgroup/engine/-/jobs/$JOB_build_windows_clang_ID/artifacts/download'