workflow:
    rules:
        # Only protected branches
        -   if: '$CI_COMMIT_REF_PROTECTED == "true"'
        -   if: '$CI_COMMIT_TAG != null'

variables:
    GIT_DEPTH: 0
    VULKAN_VERSION: 1.3.275.0

stages:
    - build
    - release

build.windows.msvc:
    stage: build
    tags:
        - windows
        - vulkan
        - amd64
    
    # Preparation
    before_script:
        - cmake --version
    
    # Process
    script:
        # Building

        # CMake - Debug
        - cmake -S . -B build/Debug -A x64 -D CMAKE_BUILD_TYPE=Debug --fresh
        - cmake --build build/Debug -t Heliogrim-Heliogrim --clean-first
        - cmake --build build/Debug -t Heliogrim-Editor

        # CMake - Profile
        #- cmake -S . -B build/Profile -A x64 -D CMAKE_BUILD_TYPE=Profile --fresh
        #- cmake --build build/Profile -t Heliogrim-Heliogrim --clean-first
        #- cmake --build build/Profile -t Heliogrim-Editor

        # CMake - Release
        #- cmake -S . -B build/Release -A x64 -D CMAKE_BUILD_TYPE=Release --fresh
        #- cmake --build build/Release -t Heliogrim-Heliogrim --clean-first
        #- cmake --build build/Release -t Heliogrim-Editor

        # Linking Resources

        #- rm -rf dist/Debug/resources
        - if (Test-Path ".\dist\Debug\resources") { Remove-Item ".\dist\Debug\resources" -Recurse -Force -Confirm:$False }
        #- rm -rf dist/Profile/resources
        #- if (Test-Path ".\dist\Profile\resources") { Remove-Item ".\dist\Profile\resources" -Recurse -Force -Confirm:$False }
        #- rm -rf dist/Release/resources
        #- if (Test-Path ".\dist\Release\resources") { Remove-Item ".\dist\Release\resources" -Recurse -Force -Confirm:$False }

        #- ln -sfrn resources dist/Debug/resources
        - New-Item -ItemType Junction -Path ".\dist\Debug\resources" -Target ".\resources"
        #- ln -sfrn resources dist/Profile/resources
        #- New-Item -ItemType Junction -Path ".\dist\Profile\resources" -Target ".\resources"
        #- ln -sfrn resources dist/Release/resources
        #- New-Item -ItemType Junction -Path ".\dist\Release\resources" -Target ".\resources"

    # Cleanup / Referencing
    after_script:
        #- CI_JOB_NAME=$CI_JOB_NAME
        #- echo "JOB_${CI_JOB_NAME//./_}_ID=$CI_JOB_ID" >> build.report.env
        - echo "JOB_build_windows_msvc_ID=$CI_JOB_ID" >> build.report.env
    
    artifacts:
        name: Heliogrim-Win-MSVC-$CI_COMMIT_REF_NAME
        paths:
            - dist/Debug/
            #- dist/Release/
            #- dist/Profile/
        expire_in: 15min
        reports:
            dotenv: build.report.env

build.windows.clang:
    stage: build
    tags:
        - windows
        - vulkan
        - amd64
    
    # Preparation
    before_script:
        - cmake --version
    
    # Process
    script:
        # Building

        # CMake - Debug
        - cmake -S . -B build/Debug -T ClangCL -A x64 -D CMAKE_BUILD_TYPE=Debug --fresh
        - cmake --build build/Debug -t Heliogrim-Heliogrim --clean-first
        - cmake --build build/Debug -t Heliogrim-Editor

        # CMake - Profile
        #- cmake -S . -B build/Profile -T ClangCL -A x64 -D CMAKE_BUILD_TYPE=Profile --fresh
        #- cmake --build build/Profile -t Heliogrim-Heliogrim --clean-first
        #- cmake --build build/Profile -t Heliogrim-Editor

        # CMake - Release
        #- cmake -S . -B build/Release -T ClangCL -A x64 -D CMAKE_BUILD_TYPE=Release --fresh
        #- cmake --build build/Release -t Heliogrim-Heliogrim --clean-first
        #- cmake --build build/Release -t Heliogrim-Editor

        # Linking Resources

        #- rm -rf dist/Debug/resources
        - if (Test-Path ".\dist\Debug\resources") { Remove-Item ".\dist\Debug\resources" -Recurse -Force -Confirm:$False }
        #- rm -rf dist/Profile/resources
        #- if (Test-Path ".\dist\Profile\resources") { Remove-Item ".\dist\Profile\resources" -Recurse -Force -Confirm:$False }
        #- rm -rf dist/Release/resources
        #- if (Test-Path ".\dist\Release\resources") { Remove-Item ".\dist\Release\resources" -Recurse -Force -Confirm:$False }

        #- ln -sfrn resources dist/Debug/resources
        - New-Item -ItemType Junction -Path ".\dist\Debug\resources" -Target ".\resources"
        #- ln -sfrn resources dist/Profile/resources
        #- New-Item -ItemType Junction -Path ".\dist\Profile\resources" -Target ".\resources"
        #- ln -sfrn resources dist/Release/resources
        #- New-Item -ItemType Junction -Path ".\dist\Release\resources" -Target ".\resources"

    # Cleanup / Referencing
    after_script:
        #- CI_JOB_NAME=$CI_JOB_NAME
        #- echo "JOB_${CI_JOB_NAME//./_}_ID=$CI_JOB_ID" >> build.report.env
        - echo "JOB_build_windows_clang_ID=$CI_JOB_ID" >> build.report.env
    
    artifacts:
        name: Heliogrim-Win-Clang-$CI_COMMIT_REF_NAME
        paths:
            - dist/Debug/
            #- dist/Release/
            #- dist/Profile/
        expire_in: 15min
        reports:
            dotenv: build.report.env

build.linux.gcc:
    stage: build
    tags:
        - linux
        - amd64
    
    # Preparation
    before_script:
        # Prepare Commands
        - command -v make 2>&1 || { echo >&2 "Required unavailable command make, try to recover."; sudo apt-get install build-essential -y; }
        - command -v cmake 2>&1 || { echo >&2 "Required unavailable command cmake, try to recover."; sudo apt-get install cmake -y; }
        - command -v g++ 2>&1 || { echo >&2 "Required unavailable command g++, try to recover."; sudo apt-get install build-essential -y; }
        - command -v xz 2>&1 || { echo >&2 "Required unavailable command xz, try to recover."; sudo apt-get install xz-utils -y; }
        # Ensure Vulkan SDK
        - rm -r ~/vulkan 2> /dev/null || true
        - mkdir ~/vulkan
        - curl "https://sdk.lunarg.com/sdk/download/$VULKAN_VERSION/linux/vulkansdk-linux-x86_64-$VULKAN_VERSION.tar.xz" --output ~/vulkan/sdk.tar.xz
        - tar -xf ~/vulkan/sdk.tar.xz -C ~/vulkan
        - source "$HOME/vulkan/$VULKAN_VERSION/setup-env.sh"
        # Check Versions
        - cmake --version
    
    # Process
    script:
        # Building

        # Generator: Makefiles ~ '-A x64' by default

        # CMake - Debug
        - cmake -S . -B build/Debug -D CMAKE_C_COMPILER=/usr/bin/gcc -D CMAKE_CXX_COMPILER=/usr/bin/g++ -D CMAKE_BUILD_TYPE=Debug --fresh
        - cmake --build build/Debug -t Heliogrim-Heliogrim --clean-first
        - cmake --build build/Debug -t Heliogrim-Editor

        # CMake - Profile
        #- cmake -S . -B build/Profile -A x64 -D CMAKE_C_COMPILER=/usr/bin/gcc -D CMAKE_CXX_COMPILER=/usr/bin/g++ -D CMAKE_BUILD_TYPE=Profile --fresh
        #- cmake --build build/Profile -t Game --clean-first

        # CMake - Release
        #- cmake -S . -B build/Release -A x64 -D CMAKE_C_COMPILER=/usr/bin/gcc -D CMAKE_CXX_COMPILER=/usr/bin/g++ -D CMAKE_BUILD_TYPE=Release --fresh
        #- cmake --build build/Release -t Game --clean-first

        # Linking Resources

    # Cleanup / Referencing
    after_script:
        - CI_JOB_NAME=$CI_JOB_NAME
        - echo "JOB_${CI_JOB_NAME//./_}_ID=$CI_JOB_ID" >> build.report.env
    
    artifacts:
        name: Heliogrim-Unix-GCC-$CI_COMMIT_REF_NAME
        paths:
            - dist/Debug/
            #- dist/Release/
            #- dist/Profile/
        expire_in: 15min
        reports:
            dotenv: build.report.env

build.linux.clang:
    stage: build
    tags:
        - linux
        - amd64
    
    # Preparation
    before_script:
        # Prepare Commands
        - command -v make 2>&1 || { echo >&2 "Required unavailable command make, try to recover."; sudo apt-get install build-essential -y; }
        - command -v cmake 2>&1 || { echo >&2 "Required unavailable command cmake, try to recover."; sudo apt-get install cmake -y; }
        - |-
            command -v clang 2>&1 || {
                echo >&2 "Required unavailable command clang, try to recover."
                sudo apt-get install lsb-release wget software-properties-common gnupg -y
                sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
            }
        - command -v xz 2>&1 || { echo >&2 "Required unavailable command xz, try to recover."; sudo apt-get install xz-utils -y; }
        # Ensure Vulkan SDK
        - rm -r ~/vulkan 2> /dev/null || true
        - mkdir ~/vulkan
        - curl "https://sdk.lunarg.com/sdk/download/$VULKAN_VERSION/linux/vulkansdk-linux-x86_64-$VULKAN_VERSION.tar.xz" --output ~/vulkan/sdk.tar.xz
        - tar -xf ~/vulkan/sdk.tar.xz -C ~/vulkan
        - source "$HOME/vulkan/$VULKAN_VERSION/setup-env.sh"
        # Check Versions
        - cmake --version
    
    # Process
    script:
        # Building

        # Generator: Makefiles ~ '-A x64' by default

        # CMake - Debug
        - cmake -S . -B build/Debug -D CMAKE_C_COMPILER=/usr/bin/clang-16 -D CMAKE_CXX_COMPILER=/usr/bin/clang++-16 -D CMAKE_BUILD_TYPE=Debug --fresh
        - cmake --build build/Debug -t Heliogrim-Heliogrim --clean-first
        - cmake --build build/Debug -t Heliogrim-Editor

        # CMake - Profile
        #- cmake -S . -B build/Profile -A x64 -D CMAKE_C_COMPILER=/usr/bin/clang -D CMAKE_CXX_COMPILER=/usr/bin/clang++ -D CMAKE_BUILD_TYPE=Profile --fresh
        #- cmake --build build/Profile -t Game --clean-first

        # CMake - Release
        #- cmake -S . -B build/Release -A x64 -D CMAKE_C_COMPILER=/usr/bin/clang -D CMAKE_CXX_COMPILER=/usr/bin/clang++ -D CMAKE_BUILD_TYPE=Release --fresh
        #- cmake --build build/Release -t Game --clean-first

        # Linking Resources

    # Cleanup / Referencing
    after_script:
        - CI_JOB_NAME=$CI_JOB_NAME
        - echo "JOB_${CI_JOB_NAME//./_}_ID=$CI_JOB_ID" >> build.report.env
    
    artifacts:
        name: Heliogrim-Unix-Clang-$CI_COMMIT_REF_NAME
        paths:
            - dist/Debug/
            #- dist/Release/
            #- dist/Profile/
        expire_in: 15min
        reports:
            dotenv: build.report.env

#test:
#    stage: test
#    script:
#        - echo "Test"

#deploy:
#    stage: deploy
#    script:
#        - echo "Deploy"

release:
    stage: release
    tags:
        - linux
        - amd64
    rules:
        -   if: '$CI_COMMIT_TAG != null'
    needs:
        -   job: build.linux.gcc
            artifacts: true
        -   job: build.linux.clang
            artifacts: true
        -   job: build.windows.msvc
            artifacts: true
        -   job: build.windows.clang
            artifacts: true
    before_script:
        # Prepare Commands
        - |-
            command -v release-cli 2>&1 || {
                echo >&2 "Required unavailable command release-cli, try to recover."
                wget https://go.dev/dl/go1.20.5.linux-amd64.tar.gz
                sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.20.5.linux-amd64.tar.gz
                export PATH=$PATH:/usr/local/go/bin
                source ~/.bashrc
                sudo curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
                sudo chmod +x /usr/local/bin/release-cli
                source ~/.bashrc
            }
    script:
        - echo "Release '$CI_COMMIT_TAG' using jobs '$JOB_build_linux_gcc_ID', '$JOB_build_linux_clang_ID', '$JOB_build_windows_msvc_ID', '$JOB_build_windows_clang_ID'"
    release:
        tag_name: '$CI_COMMIT_TAG'
        name: "Release '$CI_COMMIT_TAG'"
        description: 'CI automatic tagged release.'
        assets:
            links:
                -   name: "Linux GCC Build"
                    url: 'https://git.neogc.net/heliogrim-workgroup/engine/-/jobs/$JOB_build_linux_gcc_ID/artifacts/download'
                -   name: "Linux Clang Build"
                    url: 'https://git.neogc.net/heliogrim-workgroup/engine/-/jobs/$JOB_build_linux_clang_ID/artifacts/download'
                -   name: "Windows MSVC Build"
                    url: 'https://git.neogc.net/heliogrim-workgroup/engine/-/jobs/$JOB_build_windows_msvc_ID/artifacts/download'
                -   name: "Windows Clang Build"
                    url: 'https://git.neogc.net/heliogrim-workgroup/engine/-/jobs/$JOB_build_windows_clang_ID/artifacts/download'